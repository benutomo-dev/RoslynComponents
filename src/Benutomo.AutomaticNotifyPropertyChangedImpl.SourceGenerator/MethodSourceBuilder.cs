using Benutomo.AutomaticNotifyPropertyChangedImpl.SourceGenerator.Embedding;
using Microsoft.CodeAnalysis;
using static SourceGeneratorCommons.SourceBuilder;

namespace Benutomo.AutomaticNotifyPropertyChangedImpl.SourceGenerator
{
    sealed class MethodSourceBuilder : IDisposable
    {
        delegate void MethodSourceBuilderAction(MethodSourceBuilder builder);
        delegate void MethodSourceBuilderAction<T1>(MethodSourceBuilder builder, T1 arg1);

        SourceBuilder _sourceBuilder;

        MethodSourceBuildInputs _sourceBuildInputs;


        public MethodSourceBuilder(SourceProductionContext context, MethodSourceBuildInputs sourceBuildInputs)
        {
            _sourceBuildInputs = sourceBuildInputs;
            _sourceBuilder = new SourceBuilder(context, $"{sourceBuildInputs.ContainingTypeDeclaration.MakeStandardHintName()}.EventMethods.{_sourceBuildInputs.TargetPropertyName}");
        }

        public void Commit()
        {
            _sourceBuilder.Commit();
        }

        public void Dispose()
        {
            _sourceBuilder.Dispose();
        }

        #region _sourceBuilder Methods
        public string SourceText => _sourceBuilder.SourceText;
        public void PutIndentSpace() => _sourceBuilder.PutIndentSpace();
        public void Clear() => _sourceBuilder.Clear();
        public void Append(string text) => _sourceBuilder.Append(text);
        public void Append(ReadOnlySpan<char> text) => _sourceBuilder.Append(text);
        public void AppendLine(string text) => _sourceBuilder.AppendLine(text);
        public void AppendLine(ReadOnlySpan<char> text) => _sourceBuilder.AppendLine(text);
        public void AppendLineWithFirstIndent(string text) => _sourceBuilder.AppendLineWithFirstIndent(text);
        public void AppendLineWithFirstIndent(ReadOnlySpan<char> text) => _sourceBuilder.AppendLineWithFirstIndent(text);
        public void AppendLine() => _sourceBuilder.AppendLine();
        public _BlockEndDisposable BeginBlock(string blockHeadLine) => _sourceBuilder.BeginBlock(blockHeadLine);
        public _BlockEndDisposable BeginBlock(ReadOnlySpan<char> text) => _sourceBuilder.BeginBlock(text);
        public _BlockEndDisposable BeginBlock() => _sourceBuilder.BeginBlock();
        public _BlockEndDisposable BeginTypeDeclaration(string? classDecralationLineComment) => _sourceBuilder.BeginTypeDefinitionBlock(_sourceBuildInputs.ContainingTypeDeclaration, TypeDefinitionBlockOptions.Simple with { TypeDeclarationLineTail = classDecralationLineComment });
        #endregion

        public void Build()
        {
            _sourceBuilder.Clear();

#if !DEBUG
            AppendLine(SourceBuilder.AutoGeneratedComment);
#endif

            AppendLine("#nullable enable");
            AppendLine("#pragma warning disable CA1507");
            AppendLine("#pragma warning disable CS0612 // Obsolete属性でマークされたメソッドの呼び出しに対する警告を抑止");
            AppendLine("#pragma warning disable CS0618 // Obsolete属性でマークされたメソッドの呼び出しに対する警告を抑止");
            AppendLine("#pragma warning disable CS0619 // Obsolete属性でマークされたメソッドの呼び出しに対するエラーを抑止");
            AppendLine("#pragma warning disable CS0436");

            using (BeginTypeDeclaration($" // [{_sourceBuildInputs.TargetPropertyName}] This is implementation class by AutomaticNotifyPropertyChangedImpl."))
            {
                WriteBody();
            }
        }

        void WriteBody()
        {
            string changedEventBaseName;
            if (_sourceBuildInputs.ChangedEventAccessibility == GenerateMemberAccessibility.PrivateForExplicitImplimetOnly)
            {
                changedEventBaseName = _sourceBuildInputs.FieldName;
            }
            else
            {
                changedEventBaseName = _sourceBuildInputs.DefaultNotificationPropertyName;
            }

            string changingEventBaseName;
            if (_sourceBuildInputs.ChangedEventAccessibility == GenerateMemberAccessibility.PrivateForExplicitImplimetOnly)
            {
                changingEventBaseName = _sourceBuildInputs.FieldName;
            }
            else
            {
                changingEventBaseName = _sourceBuildInputs.DefaultNotificationPropertyName;
            }


            foreach (var explicitImplementation in _sourceBuildInputs.ExplicitInterfaceImplementations.Values)
            {
                // 実装インターフェイスのイベントの明示的実装
                AppendLine();
                RenderExpliciteImplimentaionEvent(explicitImplementation, changedEventBaseName, changingEventBaseName);
            }

            if (_sourceBuildInputs.ChangedEventAccessibility != GenerateMemberAccessibility.None)
            {
                // Changedイベントの実装
                AppendLine();
                RenderChangedEvent(changedEventBaseName);
            }

            if (_sourceBuildInputs.ChangingEventAccessibility != GenerateMemberAccessibility.None)
            {
                // Changingイベントの実装
                AppendLine();
                RenderChangngEvent(changingEventBaseName);
            }

            if (_sourceBuildInputs.ChangedObservableAccesibility != GenerateMemberAccessibility.None)
            {
                // ChangedAsObservable(bool pushValueAtSubscribed = false)の実装
                AppendLine();
                RenderChangedAsObservable();
            }

            if (_sourceBuildInputs.ChangingObservableAccesibility != GenerateMemberAccessibility.None)
            {
                // ChangingAsObservable()の実装
                AppendLine();
                RenderChangingAsObservable();
            }

            // フィールドメンバの定義
            AppendLine();
            RenderInternalField();

            // getterメソッドの実装
            AppendLine();
            RenderGetterMethod();
            
            // デフォルトsetterメソッドの実装
            AppendLine();
            RenderDefaultSetterMethod(changedEventBaseName, changingEventBaseName);

            // デフォルトsetterメソッドの実装
            if (_sourceBuildInputs.PropertyTypeIsInterlockExchangeable)
            {
                AppendLine();
                RenderInterlockedExchangeSetterMethod(changedEventBaseName, changingEventBaseName);
            }

            // IEqualityComparer指定付きsetterメソッドの実装
            AppendLine();
            RenderCustomEqualsSetterMethod(changedEventBaseName, changingEventBaseName);


            // 遅延通知版setterメソッドの実装
            AppendLine();
            RenderDeferredNotificationSetterMethod(changedEventBaseName, changingEventBaseName);

            // IEqualityComparer指定付き遅延通知版setterメソッドの実装
            AppendLine();
            RenderCustomEqualsDeferredNotificationSetterMethod(changedEventBaseName, changingEventBaseName);

            // 遅延通知用structの定義
            AppendLine();
            RenderDefferedNotificationStruct(changedEventBaseName);

            return;
        }

        static string ToAccessibilityToken(GenerateMemberAccessibility accessibility)
        {
            switch (accessibility)
            {
                case GenerateMemberAccessibility.Public: return "public";
                case GenerateMemberAccessibility.Protected: return "protected";
                case GenerateMemberAccessibility.Internal: return "internal";
                case GenerateMemberAccessibility.ProrectedInternal: return "protected internal";
                case GenerateMemberAccessibility.PrivateProrected: return "private protected";
                case GenerateMemberAccessibility.Private: return "private";
                case GenerateMemberAccessibility.PrivateForExplicitImplimetOnly: return "private";
                default: throw new InvalidOperationException();
            }
        }

        /// <summary>
        /// <see cref="explicitImplementation"/>の<see cref="ExplicitImplementationArgs.EventType"/>の値で以下のいずれかを生成
        /// <code>event global::System.EventHandler? global::Namespace.IInterface.PropertyXChanging { add => PropertyXChanging += value; remove => PropertyXChanging += value;}</code>
        /// <code>event global::System.EventHandler? global::Namespace.IInterface.ProcertyXChanged  { add => ProcertyXChanged  += value; remove => ProcertyXChanged  += value;}</code>
        /// </summary>
        void RenderExpliciteImplimentaionEvent(ExplicitImplementationArgs explicitImplementation, string changedEventBaseName, string changingEventBaseName)
        {
            string redirectEventHandlerBasename;
            string redirectEventHandlerSuffix;
            switch (explicitImplementation.EventType)
            {
                case ExplicitImplementationEventType.ChangedEventHandler:
                    redirectEventHandlerBasename = changedEventBaseName;
                    redirectEventHandlerSuffix = "Changed";
                    break;
                case ExplicitImplementationEventType.ChangingEventHandler:
                    redirectEventHandlerBasename = changingEventBaseName;
                    redirectEventHandlerSuffix = "Changing";
                    break;
                default:
                    return;
            }

            RenderExcludeFromCodeCoverageAttribute();
            using (BeginBlock($"event global::System.EventHandler? {explicitImplementation.InterfaceType}.{explicitImplementation.InterfaceEventName}"))
            {
                AppendLineWithFirstIndent($@" {{ add    => {redirectEventHandlerBasename}{redirectEventHandlerSuffix} += value;");
                AppendLineWithFirstIndent($@" {{ remove => {redirectEventHandlerBasename}{redirectEventHandlerSuffix} -= value;");
            }
        }

        void RenderChangedEvent(string changedEventBaseName)
        {
            RenderExcludeFromCodeCoverageAttribute();
            AppendLineWithFirstIndent($@"{ToAccessibilityToken(_sourceBuildInputs.ChangedEventAccessibility)} event global::System.EventHandler? {changedEventBaseName}Changed;");
        }

        void RenderChangngEvent(string changingEventBaseName)
        {
            RenderExcludeFromCodeCoverageAttribute();
            AppendLineWithFirstIndent($@"{ToAccessibilityToken(_sourceBuildInputs.ChangingEventAccessibility)} event global::System.EventHandler? {changingEventBaseName}Changing;");
        }

        void RenderChangedAsObservable()
        {
            RenderExcludeFromCodeCoverageAttribute();
            RenderAggressiveInliningAttribute();
            RenderAutoGeneratedInternalAccessorMethodAttribute();
            AppendLineWithFirstIndent($@"{ToAccessibilityToken(_sourceBuildInputs.ChangedObservableAccesibility)} global::System.IObservable<{_sourceBuildInputs.PropertyType.GlobalReference}> {_sourceBuildInputs.DefaultNotificationPropertyName}ChangedAsObservable(bool pushValueAtSubscribed = false)");
            AppendLineWithFirstIndent($@"    =>  new global::Benutomo.Internal.EventToObservable<{_sourceBuildInputs.PropertyType.GlobalReference}>(");
            AppendLineWithFirstIndent($@"        h  => {_sourceBuildInputs.DefaultNotificationPropertyName}Changed += h,");
            AppendLineWithFirstIndent($@"        h  => {_sourceBuildInputs.DefaultNotificationPropertyName}Changed -= h,");
            AppendLineWithFirstIndent($@"        () => {_sourceBuildInputs.FieldName}, pushValueAtSubscribed);");
        }

        void RenderChangingAsObservable()
        {
            RenderExcludeFromCodeCoverageAttribute();
            RenderAggressiveInliningAttribute();
            RenderAutoGeneratedInternalAccessorMethodAttribute();

            AppendLineWithFirstIndent($"{ToAccessibilityToken(_sourceBuildInputs.ChangingObservableAccesibility)} global::System.IObservable<object?> {_sourceBuildInputs.DefaultNotificationPropertyName}ChangingAsObservable()");
            AppendLineWithFirstIndent($"    =>  new global::Benutomo.Internal.EventToObservable<object?>(");
            AppendLineWithFirstIndent($"        h  => {_sourceBuildInputs.DefaultNotificationPropertyName}Changing += h,");
            AppendLineWithFirstIndent($"        h  => {_sourceBuildInputs.DefaultNotificationPropertyName}Changing -= h,");
            AppendLineWithFirstIndent($"        () => this, pushValueAtSubscribed: false);");
        }

        void RenderDefferedNotificationStruct(string changedEventBaseName)
        {
            RenderExcludeFromCodeCoverageAttribute();
            using (BeginBlock($"public ref struct {_sourceBuildInputs.DefferedNotificationDisposableName}"))
            {
                PutIndentSpace();
                Append("private ");
                Append(_sourceBuildInputs.ContainingTypeDeclaration.Name);
                if (_sourceBuildInputs.ContainingTypeDeclaration is CsGenericDefinableTypeDeclaration { GenericTypeParams : { IsDefaultOrEmpty: false } genericTypeParams1 })
                {
                    Append("<");

                    for (int i = 0; i < genericTypeParams1.Length; i++)
                    {
                        var genericTypeArg = genericTypeParams1[i];

                        Append(genericTypeArg.Name);

                        if (i < genericTypeParams1.Length - 1)
                        {
                            Append(", ");
                        }
                    }

                    Append(">");
                }
                AppendLine("? _source;");

                AppendLine();

                Append($"internal {_sourceBuildInputs.DefferedNotificationDisposableName}({_sourceBuildInputs.ContainingTypeDeclaration.Name}");
                if (_sourceBuildInputs.ContainingTypeDeclaration is CsGenericDefinableTypeDeclaration { GenericTypeParams: { IsDefaultOrEmpty: false } genericTypeParams2 })
                {
                    Append("<");

                    for (int i = 0; i < genericTypeParams2.Length; i++)
                    {
                        var genericTypeArg = genericTypeParams2[i];

                        Append(genericTypeArg.Name);

                        if (i < genericTypeParams2.Length - 1)
                        {
                            Append(", ");
                        }
                    }

                    Append(">");
                }
                Append($"? source)");
                using (BeginBlock())
                {
                    PutIndentSpace();
                    AppendLine("_source = source;");
                }

                AppendLine();

                using (BeginBlock("public void Dispose()"))
                {
                    using (BeginBlock("if (_source is not null)"))
                    {
                        RenderChangedNotificationSection("_source", changedEventBaseName);

                        PutIndentSpace();
                        AppendLine("_source = null;");
                    }
                }
            }
        }

        void RenderInternalField()
        {
            AppendLineWithFirstIndent($"/// <summary>");
            AppendLineWithFirstIndent($"/// <see cref=\"{_sourceBuildInputs.MethodName}\" />メソッドが読み書きする内部フィールドです。");
            AppendLineWithFirstIndent($"/// </summary>");
            AppendLineWithFirstIndent($"[global::System.Diagnostics.DebuggerBrowsableAttribute(global::System.Diagnostics.DebuggerBrowsableState.Never)]");
            AppendLineWithFirstIndent($"[global::{StaticSourceAttribute.GetFullyQualifiedMetadataName<AutoGeneratedInternalFieldAttribute>()}(\"{_sourceBuildInputs.DefaultNotificationPropertyName}\")]");
            AppendLineWithFirstIndent($"private {_sourceBuildInputs.PropertyType.GlobalReference} {_sourceBuildInputs.FieldName};");
        }

        void RenderExcludeFromCodeCoverageAttribute()
        {
            AppendLineWithFirstIndent("[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]");
        }

        void RenderAggressiveInliningAttribute()
        {
            AppendLineWithFirstIndent("[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]");
        }

        void RenderAutoGeneratedInternalAccessorMethodAttribute()
        {
            AppendLineWithFirstIndent($@"[global::{StaticSourceAttribute.GetFullyQualifiedMetadataName<AutoGeneratedInternalAccessorMethodAttribute>()}]");
        }

        void RenderGetterMethod()
        {
            AppendLineWithFirstIndent($"/// <summary>");
            AppendLineWithFirstIndent($"/// {_sourceBuildInputs.DefaultNotificationPropertyName}プロパティの自動実装ゲッタメソッドです。");
            AppendLineWithFirstIndent($"/// </summary>");
            RenderExcludeFromCodeCoverageAttribute();
            RenderAggressiveInliningAttribute();
            RenderAutoGeneratedInternalAccessorMethodAttribute();
            AppendLineWithFirstIndent($"private {_sourceBuildInputs.PropertyType.GlobalReference} {_sourceBuildInputs.MethodName}() => this.{_sourceBuildInputs.FieldName};");
        }

        void RenderSetterMethodDeclarationCommonPrefixPart(string returnType, string methodName)
        {
            if (_sourceBuildInputs.PropertyType.Type.TypeDefinition.IsReferenceType && !_sourceBuildInputs.PropertyType.IsNullable)
                AppendLineWithFirstIndent($"[global::System.Diagnostics.CodeAnalysis.MemberNotNull(nameof({_sourceBuildInputs.FieldName}))]");

            RenderExcludeFromCodeCoverageAttribute();
            RenderAggressiveInliningAttribute();
            RenderAutoGeneratedInternalAccessorMethodAttribute();
            PutIndentSpace();
            Append($"private {returnType} {methodName}({_sourceBuildInputs.PropertyType.GlobalReference} value");
        }

        void RenderDefaultSetterMethodImplCommonPrefixPart()
        {
            if (_sourceBuildInputs.PropertyType.Type.TypeDefinition.IsReferenceType)
            {
                if (!_sourceBuildInputs.PropertyType.IsNullable)
                    AppendLineWithFirstIndent("if (value is null) throw new global::System.ArgumentNullException(nameof(value));");

                if (_sourceBuildInputs.PropertyType.Type.TypeDefinition.Is(CsSpecialType.String))
                {
                    PutIndentSpace();
                    Append($"if ({_sourceBuildInputs.FieldName} == value) ");
                }
                else
                {
                    PutIndentSpace();
                    Append($"if (object.ReferenceEquals({_sourceBuildInputs.FieldName}, value)) ");
                }
            }
            else
            {
                PutIndentSpace();
                Append($"if (global::System.Collections.Generic.EqualityComparer<{_sourceBuildInputs.PropertyType.GlobalReference}>.Default.Equals({_sourceBuildInputs.FieldName}, value)) ");
            }
        }

        void RenderChangingNotificationSection(string changingEventBaseName)
        {
            if (_sourceBuildInputs.ChangingEventAccessibility != GenerateMemberAccessibility.None)
                AppendLineWithFirstIndent($"{changingEventBaseName}Changing?.Invoke(this, global::System.EventArgs.Empty);");

            if (_sourceBuildInputs.EnabledNotifyPropertyChanging)
                AppendLineWithFirstIndent($"this.PropertyChanging?.Invoke(this, __PropertyChangingEventArgs_{_sourceBuildInputs.DefaultNotificationPropertyName});");
        }

        void RenderChangedNotificationSection(string sourceName, string changedEventBaseName)
        {
            if (_sourceBuildInputs.ChangedEventAccessibility != GenerateMemberAccessibility.None)
                AppendLineWithFirstIndent($"{sourceName}.{changedEventBaseName}Changed?.Invoke({sourceName}, global::System.EventArgs.Empty);");

            if (_sourceBuildInputs.EnabledNotifyPropertyChanged)
                AppendLineWithFirstIndent($"{sourceName}.PropertyChanged?.Invoke({sourceName}, __PropertyChangedEventArgs_{_sourceBuildInputs.DefaultNotificationPropertyName});");
        }

        void RenderFieldChangeSection()
        {
            AppendLineWithFirstIndent($"{_sourceBuildInputs.FieldName} = value;");
        }

        static void RenderHasNotChangedBooleanReturnStatement(MethodSourceBuilder builder)
        {
            // false(変更無し)を返却して終了
            builder.AppendLine("return false;");
        }

        static void RenderBooleanReturnAfterChangedPart(MethodSourceBuilder builder, string changedEventBaseName)
        {
            // 通常版は直接変更の通知を実施
            builder.RenderChangedNotificationSection("this", changedEventBaseName);

            // true(変更有り)を返却して終了
            builder.AppendLineWithFirstIndent("return true;");
        }

        static void RenderHasNotChangedDefferedNotificationReturnStatement(MethodSourceBuilder builder)
        {
            // 変更通知の発生しないオブジェクトを返却して終了
            builder.AppendLine($"return new {builder._sourceBuildInputs.DefferedNotificationDisposableName}(null);");
        }

        static void RenderDefferedNotificationAfterChangedPart(MethodSourceBuilder builder, string changedEventBaseName)
        {
            // Dispose時に変更通知を発生させるオブジェクトを返却して終了
            builder.AppendLineWithFirstIndent($"return new {builder._sourceBuildInputs.DefferedNotificationDisposableName}(this);");
        }

        void RenderDefaultSetterMethodMainPart(
            string changedEventBaseName,
            string changingEventBaseName,
            MethodSourceBuilderAction renderHasNotChangedReturnStatement,
            MethodSourceBuilderAction<string> renderAfterChangedPart
            )
        {
            AppendLine(")");
            using (BeginBlock())
            {
                RenderDefaultSetterMethodImplCommonPrefixPart();
                renderHasNotChangedReturnStatement(this);

                AppendLine();

                // フィールドの変更
                RenderChangingNotificationSection(changingEventBaseName);
                RenderFieldChangeSection();

                // フィールドの変更後の処理
                renderAfterChangedPart(this, changedEventBaseName);
            }
        }

        void RenderDefaultSetterMethod(string changedEventBaseName, string changingEventBaseName)
        {
            AppendLineWithFirstIndent($"/// <summary>");
            AppendLineWithFirstIndent($"/// {_sourceBuildInputs.DefaultNotificationPropertyName}プロパティの標準的な自動実装セッタメソッドです。");
            AppendLineWithFirstIndent($"/// 現在の内部フィールドの値と引数で渡される値が異なる場合に内部フィールドの値を更新し、イベントを発生させ、戻り値としてtrueを返却します。");
            AppendLineWithFirstIndent($"/// 現在の内部フィールドの値と引数で渡される値が同一である場合にイベントは発生せず、戻り値としてfalseを返却します。");
            AppendLineWithFirstIndent($"/// </summary>");
            AppendLineWithFirstIndent($"/// <param name=\"value\">プロパティの新しい設定値</param>");
            AppendLineWithFirstIndent($"/// <return>内部フィールドの値が更新された場合はtrue</return>");
            RenderSetterMethodDeclarationCommonPrefixPart(returnType: "bool", _sourceBuildInputs.MethodName);

            RenderDefaultSetterMethodMainPart(
                changedEventBaseName,
                changingEventBaseName,
                RenderHasNotChangedBooleanReturnStatement, // return false;
                RenderBooleanReturnAfterChangedPart        // Changedイベントの発行、return true;
                );
        }

        void RenderDeferredNotificationSetterMethod(string changedEventBaseName, string changingEventBaseName)
        {
            AppendLineWithFirstIndent($"/// <summary>");
            AppendLineWithFirstIndent($"/// {_sourceBuildInputs.DefaultNotificationPropertyName}プロパティの変更後通知をメソッド戻り値のDiposeまで遅延する自動実装セッタメソッドです。");
            AppendLineWithFirstIndent($"/// 現在の内部フィールドの値と引数で渡される値が異なる場合に内部フィールドの値を更新します。");
            AppendLineWithFirstIndent($"/// 変更前の通知イベントはこのメソッド内で発生します。変更後の通知イベントはこのメソッドの戻り値のDiposeで発生します。");
            AppendLineWithFirstIndent($"/// </summary>");
            AppendLineWithFirstIndent($"/// <param name=\"value\">プロパティの新しい設定値</param>");
            AppendLineWithFirstIndent($"/// <return>内部フィールドの値が更新された場合はtrue</return>");
            RenderSetterMethodDeclarationCommonPrefixPart(returnType: _sourceBuildInputs.DefferedNotificationDisposableName, _sourceBuildInputs.DefferedNotificationMethodName);

            RenderDefaultSetterMethodMainPart(
                changedEventBaseName,
                changingEventBaseName,
                RenderHasNotChangedDefferedNotificationReturnStatement, // return new XxxDisposable(null);
                RenderDefferedNotificationAfterChangedPart              // return new XxxDisposable(this);
                );
        }

        void RenderInterlockedExchangeSetterMethod(string changedEventBaseName, string changingEventBaseName)
        {
            bool requiredChangingNotification = false
                || _sourceBuildInputs.ChangingEventAccessibility != GenerateMemberAccessibility.None
                || _sourceBuildInputs.EnabledNotifyPropertyChanging
                ;

            AppendLineWithFirstIndent($"/// <summary>");
            AppendLineWithFirstIndent($"/// {_sourceBuildInputs.DefaultNotificationPropertyName}プロパティの内部フィールドを<see cref=\"global::System.Threading.Interloced.Exchange\">によって更新する自動実装セッタメソッドです。");
            AppendLineWithFirstIndent($"/// ユーザ実装で変更前後の値に対して何だかの処理を付加的に行う必要がある場合などに使用します。");
            AppendLineWithFirstIndent($"/// 現在の内部フィールドの値と引数で渡される値が異なる場合に内部フィールドの値を更新し、イベントを発生させ、");
            AppendLineWithFirstIndent($"/// outパラメータに変更の値を設定し、戻り値としてtrueを返却します。");
            AppendLineWithFirstIndent($"/// 現在の内部フィールドの値と引数で渡される値が同一である場合にイベントは発生せず、戻り値としてfalseを返却します。");
            AppendLineWithFirstIndent($"/// </summary>");
            AppendLineWithFirstIndent($"/// <param name=\"value\">プロパティの新しい設定値</param>");
            AppendLineWithFirstIndent($"/// <param name=\"prevValue\">プロパティの変更前の設定値</param>");
            AppendLineWithFirstIndent($"/// <return>内部フィールドの値が更新された場合はtrue</return>");
            RenderSetterMethodDeclarationCommonPrefixPart(returnType: "bool", _sourceBuildInputs.MethodName);
            if (_sourceBuildInputs.PropertyType.Type.TypeDefinition.IsReferenceType && !_sourceBuildInputs.PropertyType.IsNullable)
            {
                Append($", [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out {_sourceBuildInputs.PropertyType.GlobalReference}? prevValue)");
            }
            else
            {
                Append($", out {_sourceBuildInputs.PropertyType.GlobalReference} prevValue)");
            }
            AppendLine();
            using (BeginBlock())
            {
                if (_sourceBuildInputs.PropertyType.Type.TypeDefinition.IsReferenceType)
                {
                    if (!_sourceBuildInputs.PropertyType.IsNullable)
                        AppendLineWithFirstIndent("if (value is null) throw new global::System.ArgumentNullException(nameof(value));");

                    if (requiredChangingNotification)
                    {
                        // Changing系の通知を行う場合は無駄な通知を避けるために、実際の設定前に同一性の判定を挟む

                        if (_sourceBuildInputs.PropertyType.Type.TypeDefinition.Is(CsSpecialType.String))
                            AppendLineWithFirstIndent($"if (global::System.Threading.Volatile.Read(ref {_sourceBuildInputs.FieldName}!) == value)");
                        else
                            AppendLineWithFirstIndent($"if (object.ReferenceEquals(global::System.Threading.Volatile.Read(ref {_sourceBuildInputs.FieldName}!), value))");

                        using (BeginBlock())
                        {
                            AppendLineWithFirstIndent("prevValue = default;");
                            AppendLineWithFirstIndent("return false;");
                        }
                    }
                }
                else
                {
                    if (requiredChangingNotification)
                    {
                        // Changing系の通知を行う場合は無駄な通知を避けるために、実際の設定前に同一性の判定を挟む

                        using (BeginBlock($"if (global::System.Threading.Volatile.Read(ref {_sourceBuildInputs.FieldName}) == value)"))
                        {
                            AppendLineWithFirstIndent("prevValue = default;");
                            AppendLineWithFirstIndent("return false;");
                        }
                    }
                }

                AppendLine();

                // フィールドの変更と変更前後通知を行う処理
                RenderChangingNotificationSection(changingEventBaseName);

                // null許容性チェックを抑止する"!"マーク (supressNullableWarningMark)
                var snwm = (_sourceBuildInputs.PropertyType.Type.TypeDefinition.IsReferenceType && !_sourceBuildInputs.PropertyType.IsNullable)
                    ? "!"
                    : "";

                AppendLineWithFirstIndent($"prevValue = global::System.Threading.Interlocked.Exchange(ref {_sourceBuildInputs.FieldName}{snwm}, value){snwm};");

                // 値の変更が発生しなかった場合はChangedを省略
                // ChangingとChangedはFormClosingとFormClosedの関係を参考にするならばXxxingに対して必ずしもXxxedの通知が発生する必要はない
                if (_sourceBuildInputs.PropertyType.Type.TypeDefinition.IsReferenceType)
                {
                    if (_sourceBuildInputs.PropertyType.Type.TypeDefinition.Is(CsSpecialType.String))
                    {
                        PutIndentSpace(); AppendLine("if (prevValue == value)");
                    }
                    else
                    {
                        PutIndentSpace(); AppendLine("if (object.ReferenceEquals(prevValue, value))");
                    }
                    using (BeginBlock())
                    {
                        AppendLineWithFirstIndent("prevValue = default;");
                        AppendLineWithFirstIndent("return false;");
                    }
                }
                else
                {
                    using (BeginBlock("if (prevValue == value)"))
                    {
                        AppendLineWithFirstIndent("prevValue = default;");
                        AppendLineWithFirstIndent("return false;");
                    }
                }

                RenderChangedNotificationSection("this", changedEventBaseName);

                AppendLineWithFirstIndent("return true;");
            }
        }

        void RenderCustomEqualsSetterMethodMainPart(
            string changedEventBaseName,
            string changingEventBaseName,
            MethodSourceBuilderAction renderHasNotChangedReturnStatement,
            MethodSourceBuilderAction<string> renderAfterChangedPart
            )
        {
            Append(", global::System.Collections.Generic.IEqualityComparer<");
            Append(_sourceBuildInputs.PropertyType.GlobalReference);
            AppendLine("> equalityComparer)");
            using (BeginBlock())
            {
                AppendLine("#pragma warning disable CS8604,CS8618,CS8774");
                PutIndentSpace();
                Append($"if (equalityComparer.Equals({_sourceBuildInputs.FieldName}, value)) ");
                renderHasNotChangedReturnStatement(this);
                AppendLine("#pragma warning restore CS8604,CS8618,CS8774");

                AppendLine();

                // フィールドの変更
                RenderChangingNotificationSection(changingEventBaseName);
                RenderFieldChangeSection();

                // フィールドの変更後の処理
                renderAfterChangedPart(this, changedEventBaseName);
            }
        }

        void RenderCustomEqualsSetterMethod(string changedEventBaseName, string changingEventBaseName)
        {
            AppendLineWithFirstIndent($"/// <summary>");
            AppendLineWithFirstIndent($"/// {_sourceBuildInputs.DefaultNotificationPropertyName}プロパティの内部フィールドを指定したEqualityComparerを用いて更新する自動実装セッタメソッドです。");
            AppendLineWithFirstIndent($"/// 現在の内部フィールドの値と引数で渡される値が異なる場合に内部フィールドの値を更新し、イベントを発生させ、戻り値としてtrueを返却します。");
            AppendLineWithFirstIndent($"/// 現在の内部フィールドの値と引数で渡される値が同一である場合にイベントは発生せず、戻り値としてfalseを返却します。");
            AppendLineWithFirstIndent($"/// </summary>");
            AppendLineWithFirstIndent($"/// <param name=\"value\">プロパティの新しい設定値</param>");
            AppendLineWithFirstIndent($"/// <param name=\"equalityComparer\">フィールドの更新要否の判定に用いるIEqualityComparerジェネリックインターフェイスを実装したオブジェクト</param>");
            AppendLineWithFirstIndent($"/// <return>内部フィールドの値が更新された場合はtrue</return>");
            RenderSetterMethodDeclarationCommonPrefixPart(returnType: "bool", _sourceBuildInputs.MethodName);

            RenderCustomEqualsSetterMethodMainPart(
                changedEventBaseName,
                changingEventBaseName,
                RenderHasNotChangedBooleanReturnStatement, // return false;
                RenderBooleanReturnAfterChangedPart        // Changedイベントの発行、return true;
                );
        }

        void RenderCustomEqualsDeferredNotificationSetterMethod(string changedEventBaseName, string changingEventBaseName)
        {
            AppendLineWithFirstIndent($"/// <summary>");
            AppendLineWithFirstIndent($"/// {_sourceBuildInputs.DefaultNotificationPropertyName}プロパティの内部フィールドを指定したEqualityComparerを用いて更新する自動実装セッタメソッドです。");
            AppendLineWithFirstIndent($"/// 現在の内部フィールドの値と引数で渡される値が異なる場合に内部フィールドの値を更新し、イベントを発生させ、戻り値としてtrueを返却します。");
            AppendLineWithFirstIndent($"/// 現在の内部フィールドの値と引数で渡される値が同一である場合にイベントは発生せず、戻り値としてfalseを返却します。");
            AppendLineWithFirstIndent($"/// </summary>");
            AppendLineWithFirstIndent($"/// <param name=\"value\">プロパティの新しい設定値</param>");
            AppendLineWithFirstIndent($"/// <param name=\"equalityComparer\">フィールドの更新要否の判定に用いるIEqualityComparerジェネリックインターフェイスを実装したオブジェクト</param>");
            AppendLineWithFirstIndent($"/// <return>内部フィールドの値が更新された場合はtrue</return>");
            RenderSetterMethodDeclarationCommonPrefixPart(returnType: _sourceBuildInputs.DefferedNotificationDisposableName, _sourceBuildInputs.DefferedNotificationMethodName);

            RenderCustomEqualsSetterMethodMainPart(
                changedEventBaseName,
                changingEventBaseName,
                RenderHasNotChangedDefferedNotificationReturnStatement, // return new XxxDisposable(null);
                RenderDefferedNotificationAfterChangedPart              // return new XxxDisposable(this);
                );
        }
    }
}
