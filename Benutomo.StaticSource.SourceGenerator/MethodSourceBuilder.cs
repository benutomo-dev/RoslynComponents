using Microsoft.CodeAnalysis;

namespace Benutomo.AutomaticNotifyPropertyChangedImpl.SourceGenerator
{
    ref struct MethodSourceBuilder
    {
        SourceBuilder _sourceBuilder;

        readonly MethodSourceBuildInputs[] _sourceBuildInputs;


        public MethodSourceBuilder(SourceProductionContext context, MethodSourceBuildInputs[] sourceBuildInputs, Span<char> initialBuffer)
        {
            _sourceBuildInputs = sourceBuildInputs;
            _sourceBuilder = new SourceBuilder(context, initialBuffer);
        }

        public void Dispose()
        {
            _sourceBuilder.Dispose();
        }

        #region _sourceBuilder Methods
        public SourceProductionContext Context => _sourceBuilder.Context;
        public string SourceText => _sourceBuilder.SourceText;
        public void PutIndentSpace() => _sourceBuilder.PutIndentSpace();
        public void Clear() => _sourceBuilder.Clear();
        public void Append(string text) => _sourceBuilder.Append(text);
        public void Append(ReadOnlySpan<char> text) => _sourceBuilder.Append(text);
        public void AppendLine(string text) => _sourceBuilder.AppendLine(text);
        public void AppendLine(ReadOnlySpan<char> text) => _sourceBuilder.AppendLine(text);
        public void AppendLine() => _sourceBuilder.AppendLine();
        public void BeginTryBlock() => _sourceBuilder.BeginTryBlock();
        public void BeginFinallyBlock() => _sourceBuilder.BeginFinallyBlock();
        public void BeginBlock(string blockHeadLine) => _sourceBuilder.BeginBlock(blockHeadLine);
        public void BeginBlock(ReadOnlySpan<char> text) => _sourceBuilder.BeginBlock(text);
        public void BeginBlock() => _sourceBuilder.BeginBlock();
        public void EndBlock() => _sourceBuilder.EndBlock();
        #endregion

        public void Build()
        {
            _sourceBuilder.Clear();

#if !DEBUG
            AppendLine("// <auto-generated />");
#endif

            AppendLine("#nullable enable");
            AppendLine("#pragma warning disable CS0612 // Obsolete属性でマークされたメソッドの呼び出しに対する警告を抑止");
            AppendLine("#pragma warning disable CS0618 // Obsolete属性でマークされたメソッドの呼び出しに対する警告を抑止");
            AppendLine("#pragma warning disable CS0436");

            WriteBody();
        }

        void WriteBody()
        {
            char[] charsBuffer = new char[1];

            BeginBlock("namespace Benutomo");
            {
                BeginBlock("internal class StaticSources");
                {
                    foreach (var iter in _sourceBuildInputs)
                    {
                        PutIndentSpace();
                        Append("internal const string ");
                        Append(iter.TypeName);
                        Append("Name = @\"");
                        Append(iter.TypeName);
                        Append("\";");
                        AppendLine();

                        if (iter.TypeName.EndsWith("Attribute"))
                        {
                            PutIndentSpace();
                            Append("internal const string ");
                            Append(iter.TypeName);
                            Append("CoreName = @\"");
                            Append(iter.TypeName.AsSpan().Slice(0, iter.TypeName.Length - "Attribute".Length));
                            Append("\";");
                            AppendLine();
                        }

                        PutIndentSpace();
                        Append("internal const string ");
                        Append(iter.TypeName);
                        Append("FullyQualifiedMetadataName = @\"");
                        Append(iter.Namespace);
                        Append(".");
                        Append(iter.TypeName);
                        Append("\";");
                        AppendLine();

                        AppendLine();
                    }

                    BeginBlock("internal static global::System.Collections.Generic.IEnumerable<(string HintName, string Source)> Sources { get; } = new (string HintName, string Source)[]");
                    foreach (var iter in _sourceBuildInputs)
                    {
                        PutIndentSpace();
                        Append("(\"");
                        Append(iter.TypeName);
                        Append(".cs\", @\"");
                        for (int i = 0; i < iter.SourceText.Length; i++)
                        {
                            if (iter.SourceText[i] == '\"')
                            {
                                Append("\"");
                            }

                            charsBuffer[0] = iter.SourceText[i];
                            Append(charsBuffer);
                        }
                        Append("\"),");

                        AppendLine();
                    }
                    EndBlock();
                    PutIndentSpace();
                    AppendLine(";");
                }
                EndBlock();
            }
            EndBlock();
        }
    }
}
