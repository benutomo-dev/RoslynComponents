<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using Benutomo;
using System.ComponentModel;

namespace SourceGeneratorDebug
{
<#
bool enableSourceGen = true;
int count = 100;

for (int i = 0; i < count; i++)
{
#>
	partial class GenClass<#= i #> : INotifyPropertyChanged
	{
        public event PropertyChangedEventHandler? PropertyChanged;
		
<# if (enableSourceGen) { #>
        [EnableNotificationSupport]
        [ChangedEvent]
		[ChangingEvent]
		[ChangedObservable]
		[ChangingObservable]
<# } #>
		public int Num0 { get => _Num0(); set => _Num0(value); }
		
<# if (enableSourceGen) { #>
        [EnableNotificationSupport]
        [ChangedEvent]
		[ChangingEvent]
		[ChangedObservable]
		[ChangingObservable]
<# } #>
		public string Text0 { get => _Text0(); set => _Text0(value); }

<# if (enableSourceGen) { #>
		GenClass<#= i #>()
		{
			__text0 = "";
		}
<# } #>


	}
<#
}
#>
<#
if (!enableSourceGen)
{
	for (int i = 0; i < count; i++)
	{
#>
	partial class GenClass<#= i #> : INotifyPropertyChanged
	{
		int _Num0() => 0;
		bool _Num0(int value)
		{
			PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Num0)));
			return true;
		}
		
		string _Text0() => "";
		bool _Text0(string value)
		{
			PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Text0)));
			return true;
		}
	}
<#
	}
}
#>
}
